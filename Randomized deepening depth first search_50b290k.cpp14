#include <iostream>
#include <vector>
#include <time.h>
using namespace std;
class graph{
    int v;
    vector<int>* arr;
    public:
    graph(int n){
        v=n;
        arr=new vector<int>[n];
    }
    void addEdge(int u,int v);
    bool randiddfs(int src,int targ,int max_depth);
    bool dls(int src,int tar,int limit);
};
void graph::addEdge(int u,int v){
    arr[u].push_back(v);
}
bool graph::randiddfs(int src,int targ,int max_depth){
    int temp=0;
    int r=rand()%max_depth-temp;
    while(1){
        for(int limit=temp;limit<=r;limit++){
        if(dls(src,targ,limit)){
            return true;
        }
        }
        temp=r;
        r=rand()%max_depth-temp;
    }
    return false;
}
bool graph::dls(int src,int targ,int limit){
    if(limit<0){
        return false;
    }
    if(src==targ){
        return true;
    }
    for(int i=0;i<(int)arr[src].size();i++){
        if(dls(arr[src][i],targ,limit-1)){
            return true;
        }
    }
    return false;
}
int main()
{
    //cout << "Hello World!" << endl;
    graph g(7);
    g.addEdge(0, 1);
    g.addEdge(0, 2);
    g.addEdge(1, 3);
    g.addEdge(1, 4);
    g.addEdge(2, 5);
    g.addEdge(2, 6);
    int src=0;
    int targ=5;
    clock_t c1=clock();
    std::cout<<g.randiddfs(0,2,3)<<"\n";
    clock_t c2=clock();
    std::cout<<(double)(c2-c1)<<"\n";
    return 0;
}
